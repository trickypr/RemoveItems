/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.trickypr.removeitems;

import com.google.common.collect.Multimap;
import org.bukkit.Material;
import org.bukkit.attribute.Attribute;
import org.bukkit.attribute.AttributeModifier;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.event.inventory.InventoryOpenEvent;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

public class Plugin extends JavaPlugin implements Listener, CommandExecutor {
    FileConfiguration config = getConfig();

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        sender.sendMessage("Reloading config");

        reloadConfig();
        config = getConfig();

        sender.sendMessage("Reloaded config");

        return true;
    }

    @Override
    public void onEnable() {
        config.addDefault("banned_items", new ArrayList<String>());

        // Configure enchantment levels
        config.addDefault("items.max_level", 5);
        config.addDefault("items.max_attribute", 0);

        config.options().copyDefaults(true);
        this.saveConfig();

        getServer().getPluginManager().registerEvents(this, this);
        getCommand("removeitems").setExecutor(this);
        this.reloadConfig();
    }

    protected boolean shouldRemove(ItemStack item, ArrayList<String> bannedItems) {
        for (String bannedItem : bannedItems) {
            if (item.getType().getKey().asString().equals(bannedItem)) {
                return true;
            }
        }

        return false;
    }

    protected boolean shouldModifyEnchantments(ItemStack item, Integer maxEnchantLevel) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();

        for (Enchantment enchantment : enchantments.keySet()) {
            Integer level = enchantments.get(enchantment);
            if (level > maxEnchantLevel) return true;
        }

        return false;
    }

    protected boolean shouldModifyAttributes(ItemStack item, Integer maxAttributeLevel) {
        Multimap<Attribute, AttributeModifier> attributes = item.getItemMeta().getAttributeModifiers();

        if (attributes == null) return false;

        for (Attribute attribute : attributes.keySet()) {
            Collection<AttributeModifier> values = attributes.get(attribute);
            for (AttributeModifier modifier : values) {
                if (modifier.getAmount() > maxAttributeLevel.doubleValue()) return true;
            }
        }

        return false;
    }

    protected ItemStack correctEnchantments(ItemStack item, Integer maxEnchantLevel) {
        Map<Enchantment, Integer> enchantments = item.getEnchantments();

        for (Enchantment enchantment : enchantments.keySet()) {
            Integer level = enchantments.get(enchantment);
            if (level > maxEnchantLevel) {
                item.addUnsafeEnchantment(enchantment, maxEnchantLevel);
            }
        }

        return item;
    }

    protected ItemStack correctAttributes(ItemStack item, Integer maxAttributeLevel) {
        ItemMeta meta = item.getItemMeta();
        Multimap<Attribute, AttributeModifier> attributes = meta.getAttributeModifiers();

        if (attributes == null) return item;

        for (Attribute attribute : attributes.keySet()) {
            Collection<AttributeModifier> values = attributes.get(attribute);

            for (AttributeModifier modifier : values) {
                if (modifier.getAmount() <= maxAttributeLevel.doubleValue())
                    continue;

                AttributeModifier newModifier = new AttributeModifier(modifier.getUniqueId(), modifier.getName(), maxAttributeLevel.doubleValue(), modifier.getOperation(), modifier.getSlot());
                meta.removeAttributeModifier(attribute, modifier);
                meta.addAttributeModifier(attribute, newModifier);
            }
        }

        item.setItemMeta(meta);
        return item;
    }

    public ItemStack[] enforceItemRestrictions(ItemStack[] contents) {
        Integer maxAttributeLevel = (Integer) config.get("items.max_attribute");
        Integer maxEnchantLevel = (Integer) config.get("items.max_level");
        ArrayList<String> bannedItems = (ArrayList<String>) config.get("banned_items");

        for (int i = 0; i < contents.length; i++) {
            ItemStack item = contents[i];

            if (item == null) continue;

            if (shouldRemove(item, bannedItems)) {
                contents[i] = new ItemStack(Material.AIR);
            }

            if (shouldModifyEnchantments(item, maxEnchantLevel)) {
                contents[i] = correctEnchantments(item, maxEnchantLevel);
            }

            if (shouldModifyAttributes(item, maxAttributeLevel)) {
                contents[i] = correctAttributes(item, maxAttributeLevel);
            }
        }

        return contents;
    }

    @EventHandler
    public void onJoinEvent(PlayerJoinEvent event) {
        ItemStack[] contents = enforceItemRestrictions(event.getPlayer().getInventory().getContents());
        event.getPlayer().getInventory().setContents(contents);
    }

    @EventHandler
    public void onInventoryOpenEvent(InventoryOpenEvent event) {
        ItemStack[] contents = enforceItemRestrictions(event.getInventory().getContents());
        event.getInventory().setContents(contents);
    }
}
